//
//  DataStructureBasic.cpp
//  test
//
//  Created by KevinLiu on 16/12/6.
//  Copyright © 2016年 KevinLiu. All rights reserved.
//

#include "DataStructureBasic.hpp"

// why can not implement template class in seperate file?(.hpp and .cpp) 
// anwser from stackoverflow

// Actually it must be understood that template class is not a class at all but a template for a class the declaration and definition of which is generated by the compiler at compile time after getting the information of the data type from the argument. 
// As long as the memory layout cannot be created, the instructions for the method definition cannot be generated. 
// Remember the first argument of the class method is the 'this' operator. 
// All class methods are converted into individual methods with name mangling and the first parameter as the object which it operates on. 
// The 'this' argument is which actually tells about size of the object which incase of template class is unavailable for the compiler unless the user instantiates the object with a valid type argument.
// In this case if you put the method definitions in a separate cpp file and try to compile it the object file itself will not be generated with the class information. 
// The compilation will not fail, it would generate the object file but it won't generate any code for the template class in the object file. 
// This is the reason why the linker is unable to find the symbols in the object files and the build fails.


// Now what is the alternative to hide important implementation details? 
// As we all know the main objective behind separating interface from implementation is hiding implementation details in binary form. 
// This is where you must separate the data structures and algorithms. 
// Your template classes must represent only data structures not the algorithms. 
// This enables you to hide more valuable implementation details in separate non-templatized class libraries,
//  the classes inside which would work on the template classes or just use them to hold data. 
// The template class would actually contain less code to assign, get and set data. 
// Rest of the work would be done by the algorithm classes.